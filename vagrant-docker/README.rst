
=====================================================
Using Debops with Vagrant-managed docker containers
=====================================================

This project is an example for using Debops with docker containers,
manached by a multi-machine Vagrantfile. It uses the Vagrant docker
provider for setting up the containers and the Vagrant provisioner
plugin Vai_ to generate the inventory-file. Provision is then actually
done using `debops` as usual.

This example also includes a `Dockerfile` which installs and starts
the ssh server, so you can use ansible on the container.

The Vagrant Ansible provisioner is not used at all, because Vai does a
much better job for our needs. If you absolutely want to use the
Vagrant Ansible provisioner, please have a look at the
vagrant-multi-machine example.


Requirements
==============

* Ansible
* Vagrant 1.6 or newer (1.5 may work, too; 1.4 does not)
* Vai_, a Vagrant provisioner plugin (see below for installation)
* `debops` (of course ;-)


Quick Start
===========

* Install the Vagrant provisioning plugin Vai_::

    vagrant plugin install vai

* Fire up Vagrant: ``vagrant up``

  This will build and start two docker containers `web` and `db` and
  generate the inventory file in ``ansible/inventory``.


* Run::

    export ANSIBLE_SSH_ARGS="-o UserKnownHostsFile=/dev/null"
    debops bootstrap --sudo -K
    debops ./simpletest.yml

  The fist one will bootstrap the virtual machines for Ansible
  management. This could have been done in the Dockerfile already, but
  then you would not be able to test bootstrapping. You will need to
  give the sudo-password of user `vagrant` once (which is `vagrant`).

  The second command will run a simple playbook testing if files have
  been found and variables have been set up as correctly as expected.
  You should get "okay" for all tasks.

  Please note: Using this ``ANSIBLE_SSH_ARGS=...`` is optional. But it
  avoids cluttering your known_hosts with keys of your ever-changing
  vagrant VMs. *Absolutely do not use this for your production servers!*

Now you can use debops as usual (mind ``ANSIBLE_SSH_ARGS=...`` :-). It
will automatically include the host definitions auto-generated by
Vagrant. If for some reason Debops resp. Ansible does not find the
inventory, you may safely run ``vagrant provision`` to regenerate it.


How it works
==============

The `docker` provider builds and creates the docker containers. See
the `documentation <https://docs.vagrantup.com/v2/docker/index.html>`_
for more information. The `Dockerfile` contained in this example does
the setup required for using the docker container as Vagrant virtual
machine. Most notably, it make the container run a ssh server. See the
comments in the Dockerfile for more information.

After that the `Vai` provisioner generates a inventory file which is
setting up host, port, private key file and the remote user as
required by Vagrant. Ansible resp. debops will read the information an
know how to connect to the Vagrant virtual machines.



Adopting to your needs
=========================

In short:
  
* (Optional) You may want to Adopt the docker container to your needs:

  - change the Dockerfile and base it on a image you prefer
  - change the Vagrantfile to use some other pre-existing image

  Please refer to the `docker provider's documentation
  <https://docs.vagrantup.com/v2/docker/index.html>`_ for details.

* Adopt the paths in the Vagrantfile to match your desired directory
  layout.

* Set up your host- and group-vars in ``ansible/inventory`` as usual.

* Define your groups in the Vagrantfile and/or in an inventory-file
  (e.g. ``ansible/inventory/groups``, the actual name of the file does
  not matter).

  In this example we do both: ``secondGroup`` is defined using the
  `Vagrantfile` and ``firstGroup`` is defined in an inventory-file.

* Add more machines to the ``Vagrantfile`` as you need.

* When (re-) starting machines the inventory file will be regenerated
  by the Ansible provisioner.



.. _Vai: https://github.com/MatthewMi11er/vai

..
 Local Variables:
 mode: rst
 ispell-local-dictionary: "american"
 End:
