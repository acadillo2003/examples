
=====================================================
Using Debops with a multi-machine Vagrantfile
=====================================================

This project is an example for using Debops with a multi-machine
Vagrantfile. It uses the Vagrant Ansible-provider only to generate the
inventory-file. Provision is then actually done using `debops` as
usual.


Requirements
==============

* Ansible
* Vagrant 1.6 or newer (1.5 may work, too; 1.4 does not)
* `debops` (of course ;-)


Quick Start
===========

* Fire up Vagrant: ``vagrant up``

  This will create two virtual machine `web` and `db` and run a dummy
  playbook on it. This playbook will do nothing, but is required to
  make Vagrant generate the inventory file.

  In addition, the Vagrantfile creates a symlink from the
  auto-generated inventory-file by Vagrant to your
  ``ansible/inventory``.

* Run ``debops ./simpletest.yml``

  This will run a simple playbook testing if files have been found and
  variables have been set up as correctly as expected. You should get
  "okay" for all tasks.

Now you can use debops as usual. It will automatically include the
host definitions auto-generated by vagrant. If for some reason debops
resp. Ansible does not find the inventory, you may safely run ``vagrant
provision`` to regenerate it.


Adopting to your needs
=========================

In short:

* Adopt the paths in the Vagrantfile to match your desired directory
  layout.

* Set up your host- and group-vars in ``ansible/inventory`` as usual.

* Define your groups in ``ansible/inventory/groups`` (the actual name
  of the file does not matter).

* Add more machines to the ``Vagrantfile`` as you need.

* When (re-) starting machines the inventory file will be regenerated
  by the Ansible provisioner.



Reasoning for using this way
===============================

We tried a lot off different setups, but the only one working
reasonable is to *not* provision from within the Vagrantfile, but use
the Ansible provisioner solely to generate the inventory file. Here is
why:

When setting up the Ansible provisioner as shown in the Vagrant and
Ansible documentation, ``ansible-playbook`` will be run once for each
machine, one machine after each other. Parallel multi-machine
provisioning is not possible this way.

When passing ``ansible.limit = 'all'`` to the Ansible provisioner (as
described in the docs, too) Vagrant will run ``ansible-playbook`` for
*all* boxes, but so many times as you have defined boxes.

Working around this is hard and the results are not satisfying.

If you intimately read the docs, you will find that the Ansible
provider is only attached to the last machine. And indeed: Now when
setting ``ansible.limit ='all'`` `vagrant` will run
``ansible-playbook`` once and only once on all machines. (Side-note:
If you want to define the machines using a loop, you have to be very
careful doing this right, see
`<https://github.com/mitchellh/vagrant/issues/1784#issuecomment-62460418
this comment>`_)

But this again has a downside: Limiting provisioning to a single
machines (``vagrant provision [vm-name]``) does not work for all
machines except the last. This is because the provisioner is only
attached to the last machine.

* About the vagrant Ansible provisioner:
  - If `ansible.inventory_path` is set, the provider will not
    generate an inventory file. You will have to take care of this by
    yourself.
  - The path in `ansible.inventory_path`, if given, must already exist.
  - The executable is hard-coded to `ansible-playbook`.



Alternative setup
=====================

Defining groups in the Vagrantfile
-------------------------------------

The Ansible provisioner supports defining groups in the Vagrantfile.
You may do this, if you like, but we do not recommend it, because we
think it make things more complicated.


Using a hand crafted inventory
-------------------------------

If for some reason you prefer to craft the inventory yourself (instead
of letting vagrant generate it) you can completely remove the Ansible
provisioner from the Vagrantfile. It's sole purpose is to generate the
inventory-file.

Please note that when using a hand-crafted inventory. you will have to
take care of the actual configuration of the machines changing. E.g.
IP-ports may change if other machines are running, too.

..
 Local Variables:
 mode: rst
 ispell-local-dictionary: "american"
 End:
